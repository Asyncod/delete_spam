# -*- coding: utf-8 -*-
import re

from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import Bot, Dispatcher, types, executor, filters
from loguru import logger
from sys import stderr

#### LOGGER MOMENT ####
logger.remove()
logger.add(stderr, format="<white>{time:HH:mm:ss}</white>"
                          " | <level>{level: <8}</level>"
                          " - <white>{message}</white>")

# #### NEED BASE ####
# base.create_db(data="channel")

#### PARAMETRS BOT'S ####
bot = Bot("—Ç–æ–∫–µ–Ω", parse_mode="HTML")
dp = Dispatcher(bot, storage=MemoryStorage())


#### START HANDLER ####
@dp.message_handler(commands=["start"], state="*")
async def start_message(message: types.Message):
    await bot.send_message(chat_id=message.chat.id,
                           text="<b>üôã –•–µ–ª–ª–æ—É –≤—Å–µ–º –Ω–∞—à–∏–º</b>\n\n"
                                "–° —ç—Ç–∏–º –±–æ—Ç–æ–º –º–æ–∂–Ω–æ –∑–∞–±—ã—Ç—å –æ –±–∞—Ä–∞–±–∞–Ω–Ω–æ–π –¥—Ä–æ–±–∏ –∏ –¥–∞—É–Ω–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ —Å–ø–∞–º—è—Ç —Å–≤–æ–µ–π –∞—Ö—É–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ–π —Ö—É–π–Ω–µ–π –ø–æ –∫–æ–º–º–µ–Ω—Ç–∞–º\n\n"
                                "–î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤ —á–∞—Ç –∏ –æ–Ω –±—É–¥–µ—Ç —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —ç—Ç–∏–º –ø—Ä–∞–≤–∏–ª–∞–º:\n\n"
                                "1Ô∏è‚É£ –ï—Å–ª–∏ –∫–∏–Ω—É—Ç–∞ —Å—Å—ã–ª–∫–∞: <code>https://, http://, t.me –∏–ª–∏ @</code>\n\n"
                                "2Ô∏è‚É£ –≠—Ç–∏ —Å—Å—ã–ª–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —á–∞—Ç–µ")


@dp.message_handler(content_types=['text'])
async def catch_message(message: types.Message):
    if "—Ä–∞–±–æ—Ç–∞–µ—à—å?" in message.text.lower():
        await message.reply(text="–¢–∞–∫ —Ç–æ—á–Ω–æ! –ï–±–∞—à—É –Ω–∞ –±–ª–∞–≥–æ –û—Ç–µ—á–µ—Å—Ç–≤–∞ ü´°")

    elif "–æ –≥–æ—Ä–µ" in message.text.lower():
        await message.reply(text="–æ –≥–æ—Ä–µ")

    elif "–¥–∞" in message.text.lower():
        await message.reply(text="–ø–∏–∑–¥–∞")

    elif "–Ω–µ—Ç" in message.text.lower():
        await message.reply(text="—Ç–∏—à–µ –º–∞–ª–æ–π")

    else:
        status = await bot.get_chat_member(chat_id=message.chat.id,
                                           user_id=message.from_user.id)

        ban_flag = re.search(pattern=r'(http(s?)|t.me|@)', string=message.text)
        resend_flag = not message.from_user.first_name == "Telegram"

        if status.status == "left" and ban_flag and resend_flag:
            await bot.delete_message(chat_id=message.chat.id,
                                     message_id=message.message_id)


@dp.message_handler(content_types=['new_chat_members'])
async def add_to_chat(message: types.Message):
    await bot.send_message(chat_id=message.chat.id,
                           text="<b>HELLO CHAT!!!!!!</b>\n\n"
                                "–Ø –ø—Ä–∏—à–µ–ª —Å—é–¥–∞, —á—Ç–æ–±—ã –±–∞–Ω–∏—Ç—å –≤—Å—è–∫–∏—Ö –≥–∞–¥–æ–≤\n\n"
                                "–î–ª—è —ç—Ç–æ–≥–æ –≤—ã–¥–∞–π—Ç–µ –º–Ω–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ *(–¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π)")


#### BOT'S POLLING ####
if __name__ == '__main__':
    logger.success("TG bot work")
    executor.start_polling(dp)
